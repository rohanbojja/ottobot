/**
 * /**
 *  * Generated by orval v1.0.0 🍺
 *  * Do not edit manually.
 *  * Sigflow API
 *  * OpenAPI spec version: 0.1.0
 *  *\/
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
} from "@tanstack/svelte-query";

import type {
  DeleteSessionById202One,
  DeleteSessionById202Three,
  GetHealth200One,
  GetHealth200Three,
  GetHealthMetrics200One,
  GetHealthMetrics200Three,
  GetSession200One,
  GetSession200Three,
  GetSessionById200One,
  GetSessionById200Three,
  GetSessionByIdLogs200One,
  GetSessionByIdLogs200Three,
  GetSessionParams,
  PostSession201One,
  PostSession201Three,
  PostSessionBodyOne,
  PostSessionBodyThree,
  PostSessionBodyTwo,
} from "./models";

import { customInstance } from "./api-client";

/**
 * Returns the health status of the system and its dependencies
 * @summary System health check
 */
export const getHealth = (signal?: AbortSignal) => {
  return customInstance<GetHealth200One | Blob | GetHealth200Three>({
    url: `/health/`,
    method: "GET",
    signal,
  });
};

export const getGetHealthQueryKey = () => {
  return [`/health/`] as const;
};

export const getGetHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    CreateQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({
    signal,
  }) => getHealth(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHealth>>
>;
export type GetHealthQueryError = unknown;

/**
 * @summary System health check
 */

export function createGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHealthQueryOptions(options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns metrics about sessions, queues, and workers
 * @summary System metrics
 */
export const getHealthMetrics = (signal?: AbortSignal) => {
  return customInstance<
    GetHealthMetrics200One | Blob | GetHealthMetrics200Three
  >({ url: `/health/metrics`, method: "GET", signal });
};

export const getGetHealthMetricsQueryKey = () => {
  return [`/health/metrics`] as const;
};

export const getGetHealthMetricsQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealthMetrics>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    CreateQueryOptions<
      Awaited<ReturnType<typeof getHealthMetrics>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthMetricsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHealthMetrics>>
  > = ({ signal }) => getHealthMetrics(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getHealthMetrics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHealthMetricsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHealthMetrics>>
>;
export type GetHealthMetricsQueryError = unknown;

/**
 * @summary System metrics
 */

export function createGetHealthMetrics<
  TData = Awaited<ReturnType<typeof getHealthMetrics>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getHealthMetrics>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHealthMetricsQueryOptions(options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a paginated list of active sessions
 * @summary List active sessions
 */
export const getSession = (params?: GetSessionParams, signal?: AbortSignal) => {
  return customInstance<GetSession200One | Blob | GetSession200Three>({
    url: `/session/`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetSessionQueryKey = (params?: GetSessionParams) => {
  return [`/session/`, ...(params ? [params] : [])] as const;
};

export const getGetSessionQueryOptions = <
  TData = Awaited<ReturnType<typeof getSession>>,
  TError = unknown,
>(
  params?: GetSessionParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSessionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSession>>> = ({
    signal,
  }) => getSession(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getSession>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSession>>
>;
export type GetSessionQueryError = unknown;

/**
 * @summary List active sessions
 */

export function createGetSession<
  TData = Awaited<ReturnType<typeof getSession>>,
  TError = unknown,
>(
  params?: GetSessionParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSessionQueryOptions(params, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new interactive coding session with AI agent and VNC access
 * @summary Create a new coding session
 */
export const postSession = (
  postSessionBody:
    | PostSessionBodyOne
    | PostSessionBodyTwo
    | PostSessionBodyThree,
  signal?: AbortSignal,
) => {
  return customInstance<PostSession201One | Blob | PostSession201Three>({
    url: `/session/`,
    method: "POST",
    data: postSessionBody,
    signal,
  });
};

export const getPostSessionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postSession>>,
    TError,
    { data: PostSessionBodyOne | PostSessionBodyTwo | PostSessionBodyThree },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof postSession>>,
  TError,
  { data: PostSessionBodyOne | PostSessionBodyTwo | PostSessionBodyThree },
  TContext
> => {
  const mutationKey = ["postSession"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSession>>,
    { data: PostSessionBodyOne | PostSessionBodyTwo | PostSessionBodyThree }
  > = (props) => {
    const { data } = props ?? {};

    return postSession(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSession>>
>;
export type PostSessionMutationBody =
  | PostSessionBodyOne
  | PostSessionBodyTwo
  | PostSessionBodyThree;
export type PostSessionMutationError = unknown;

/**
 * @summary Create a new coding session
 */
export const createPostSession = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof postSession>>,
      TError,
      { data: PostSessionBodyOne | PostSessionBodyTwo | PostSessionBodyThree },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof postSession>>,
  TError,
  { data: PostSessionBodyOne | PostSessionBodyTwo | PostSessionBodyThree },
  TContext
> => {
  const mutationOptions = getPostSessionMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};

/**
 * Retrieves the current status of a coding session
 * @summary Get session status
 */
export const getSessionById = (id: string, signal?: AbortSignal) => {
  return customInstance<GetSessionById200One | Blob | GetSessionById200Three>({
    url: `/session/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetSessionByIdQueryKey = (id: string) => {
  return [`/session/${id}`] as const;
};

export const getGetSessionByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getSessionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getSessionById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSessionByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSessionById>>> = ({
    signal,
  }) => getSessionById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getSessionById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSessionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSessionById>>
>;
export type GetSessionByIdQueryError = unknown;

/**
 * @summary Get session status
 */

export function createGetSessionById<
  TData = Awaited<ReturnType<typeof getSessionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getSessionById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSessionByIdQueryOptions(id, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Initiates termination of a coding session
 * @summary Terminate session
 */
export const deleteSessionById = (id: string) => {
  return customInstance<
    DeleteSessionById202One | Blob | DeleteSessionById202Three
  >({ url: `/session/${id}`, method: "DELETE" });
};

export const getDeleteSessionByIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof deleteSessionById>>,
    TError,
    { id: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof deleteSessionById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteSessionById"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSessionById>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteSessionById(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSessionByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSessionById>>
>;

export type DeleteSessionByIdMutationError = unknown;

/**
 * @summary Terminate session
 */
export const createDeleteSessionById = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof deleteSessionById>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): CreateMutationResult<
  Awaited<ReturnType<typeof deleteSessionById>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteSessionByIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};

/**
 * Retrieves logs for a specific session
 * @summary Get session logs
 */
export const getSessionByIdLogs = (id: string, signal?: AbortSignal) => {
  return customInstance<
    GetSessionByIdLogs200One | Blob | GetSessionByIdLogs200Three
  >({ url: `/session/${id}/logs`, method: "GET", signal });
};

export const getGetSessionByIdLogsQueryKey = (id: string) => {
  return [`/session/${id}/logs`] as const;
};

export const getGetSessionByIdLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSessionByIdLogs>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getSessionByIdLogs>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSessionByIdLogsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSessionByIdLogs>>
  > = ({ signal }) => getSessionByIdLogs(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getSessionByIdLogs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSessionByIdLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSessionByIdLogs>>
>;
export type GetSessionByIdLogsQueryError = unknown;

/**
 * @summary Get session logs
 */

export function createGetSessionByIdLogs<
  TData = Awaited<ReturnType<typeof getSessionByIdLogs>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getSessionByIdLogs>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSessionByIdLogsQueryOptions(id, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Downloads a file artifact from a session
 * @summary Download session artifact
 */
export const getDownloadByIdByFile = (
  id: string,
  file: string,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/download/${id}/${file}`,
    method: "GET",
    signal,
  });
};

export const getGetDownloadByIdByFileQueryKey = (id: string, file: string) => {
  return [`/download/${id}/${file}`] as const;
};

export const getGetDownloadByIdByFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getDownloadByIdByFile>>,
  TError = unknown,
>(
  id: string,
  file: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getDownloadByIdByFile>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDownloadByIdByFileQueryKey(id, file);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDownloadByIdByFile>>
  > = ({ signal }) => getDownloadByIdByFile(id, file, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(id && file),
    staleTime: 10000,
    ...queryOptions,
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getDownloadByIdByFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDownloadByIdByFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDownloadByIdByFile>>
>;
export type GetDownloadByIdByFileQueryError = unknown;

/**
 * @summary Download session artifact
 */

export function createGetDownloadByIdByFile<
  TData = Awaited<ReturnType<typeof getDownloadByIdByFile>>,
  TError = unknown,
>(
  id: string,
  file: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getDownloadByIdByFile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): CreateQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDownloadByIdByFileQueryOptions(id, file, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
