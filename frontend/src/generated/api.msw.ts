/**
 * /**
 *  * Generated by orval v1.0.0 üç∫
 *  * Do not edit manually.
 *  * Sigflow API
 *  * OpenAPI spec version: 0.1.0
 *  *\/
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

export const getGetHealthResponseMock = (
  overrideResponse: Partial<GetHealth200One | Blob | GetHealth200Three> = {},
): GetHealth200One | Blob | GetHealth200Three =>
  faker.helpers.arrayElement([
    {
      status: faker.helpers.arrayElement(["healthy", "degraded", "unhealthy"]),
      version: faker.string.alpha({ length: { min: 10, max: 20 } }),
      uptime: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      services: {
        redis: faker.datatype.boolean(),
        docker: faker.datatype.boolean(),
        workers: faker.number.float({
          min: 0,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      status: faker.helpers.arrayElement(["healthy", "degraded", "unhealthy"]),
      version: faker.string.alpha({ length: { min: 10, max: 20 } }),
      uptime: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      services: {
        redis: faker.datatype.boolean(),
        docker: faker.datatype.boolean(),
        workers: faker.number.float({
          min: 0,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      status: faker.helpers.arrayElement(["healthy", "degraded", "unhealthy"]),
      version: faker.string.alpha({ length: { min: 10, max: 20 } }),
      uptime: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      services: {
        redis: faker.datatype.boolean(),
        docker: faker.datatype.boolean(),
        workers: faker.number.float({
          min: 0,
          max: undefined,
          fractionDigits: 2,
        }),
      },
      timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
  ]);

export const getGetHealthMetricsResponseMock = (
  overrideResponse: Partial<
    GetHealthMetrics200One | Blob | GetHealthMetrics200Three
  > = {},
): GetHealthMetrics200One | Blob | GetHealthMetrics200Three =>
  faker.helpers.arrayElement([
    {
      active_sessions: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      total_sessions: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      queue_length: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      worker_status: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        active: faker.datatype.boolean(),
        current_jobs: faker.number.float({
          min: 0,
          max: undefined,
          fractionDigits: 2,
        }),
      })),
      timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      active_sessions: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      total_sessions: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      queue_length: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      worker_status: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        active: faker.datatype.boolean(),
        current_jobs: faker.number.float({
          min: 0,
          max: undefined,
          fractionDigits: 2,
        }),
      })),
      timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      active_sessions: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      total_sessions: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      queue_length: faker.number.float({
        min: 0,
        max: undefined,
        fractionDigits: 2,
      }),
      worker_status: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        active: faker.datatype.boolean(),
        current_jobs: faker.number.float({
          min: 0,
          max: undefined,
          fractionDigits: 2,
        }),
      })),
      timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
  ]);

export const getPostSessionResponseMock = (
  overrideResponse: Partial<
    PostSession200One | Blob | PostSession200Three
  > = {},
): PostSession200One | Blob | PostSession200Three =>
  faker.helpers.arrayElement([
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      status: faker.helpers.arrayElement([
        "initializing",
        "ready",
        "running",
        "terminating",
        "terminated",
        "error",
      ]),
      vnc_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      chat_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      expires_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      status: faker.helpers.arrayElement([
        "initializing",
        "ready",
        "running",
        "terminating",
        "terminated",
        "error",
      ]),
      vnc_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      chat_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      expires_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      status: faker.helpers.arrayElement([
        "initializing",
        "ready",
        "running",
        "terminating",
        "terminated",
        "error",
      ]),
      vnc_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      chat_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      expires_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
  ]);

export const getGetSessionByIdResponseMock = (
  overrideResponse: Partial<
    GetSessionById200One | Blob | GetSessionById200Three
  > = {},
): GetSessionById200One | Blob | GetSessionById200Three =>
  faker.helpers.arrayElement([
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      status: faker.helpers.arrayElement([
        "initializing",
        "ready",
        "running",
        "terminating",
        "terminated",
        "error",
      ]),
      vnc_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      chat_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      expires_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      status: faker.helpers.arrayElement([
        "initializing",
        "ready",
        "running",
        "terminating",
        "terminated",
        "error",
      ]),
      vnc_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      chat_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      expires_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      status: faker.helpers.arrayElement([
        "initializing",
        "ready",
        "running",
        "terminating",
        "terminated",
        "error",
      ]),
      vnc_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      chat_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      expires_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ...overrideResponse,
    },
  ]);

export const getGetSessionByIdLogsResponseMock = (
  overrideResponse: Partial<
    GetSessionByIdLogs200One | Blob | GetSessionByIdLogs200Three
  > = {},
): GetSessionByIdLogs200One | Blob | GetSessionByIdLogs200Three =>
  faker.helpers.arrayElement([
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      logs: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
        level: faker.string.alpha({ length: { min: 10, max: 20 } }),
        message: faker.string.alpha({ length: { min: 10, max: 20 } }),
        metadata: faker.helpers.arrayElement([{}, undefined]),
      })),
      ...overrideResponse,
    },
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      logs: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
        level: faker.string.alpha({ length: { min: 10, max: 20 } }),
        message: faker.string.alpha({ length: { min: 10, max: 20 } }),
        metadata: faker.helpers.arrayElement([{}, undefined]),
      })),
      ...overrideResponse,
    },
    {
      session_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      logs: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
        level: faker.string.alpha({ length: { min: 10, max: 20 } }),
        message: faker.string.alpha({ length: { min: 10, max: 20 } }),
        metadata: faker.helpers.arrayElement([{}, undefined]),
      })),
      ...overrideResponse,
    },
  ]);

export const getGetHealthMockHandler = (
  overrideResponse?:
    | GetHealth200One
    | Blob
    | GetHealth200Three
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetHealth200One | Blob | GetHealth200Three>
        | GetHealth200One
        | Blob
        | GetHealth200Three),
) => {
  return http.get("*/health/", async (info) => {
    await delay(1000);

    return new HttpResponse(
      overrideResponse !== undefined
        ? typeof overrideResponse === "function"
          ? await overrideResponse(info)
          : overrideResponse
        : getGetHealthResponseMock(),
      { status: 200, headers: { "Content-Type": "text/plain" } },
    );
  });
};

export const getGetHealthMetricsMockHandler = (
  overrideResponse?:
    | GetHealthMetrics200One
    | Blob
    | GetHealthMetrics200Three
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetHealthMetrics200One | Blob | GetHealthMetrics200Three>
        | GetHealthMetrics200One
        | Blob
        | GetHealthMetrics200Three),
) => {
  return http.get("*/health/metrics", async (info) => {
    await delay(1000);

    return new HttpResponse(
      overrideResponse !== undefined
        ? typeof overrideResponse === "function"
          ? await overrideResponse(info)
          : overrideResponse
        : getGetHealthMetricsResponseMock(),
      { status: 200, headers: { "Content-Type": "text/plain" } },
    );
  });
};

export const getPostSessionMockHandler = (
  overrideResponse?:
    | PostSession200One
    | Blob
    | PostSession200Three
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<PostSession200One | Blob | PostSession200Three>
        | PostSession200One
        | Blob
        | PostSession200Three),
) => {
  return http.post("*/session/", async (info) => {
    await delay(1000);

    return new HttpResponse(
      overrideResponse !== undefined
        ? typeof overrideResponse === "function"
          ? await overrideResponse(info)
          : overrideResponse
        : getPostSessionResponseMock(),
      { status: 200, headers: { "Content-Type": "text/plain" } },
    );
  });
};

export const getGetSessionByIdMockHandler = (
  overrideResponse?:
    | GetSessionById200One
    | Blob
    | GetSessionById200Three
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetSessionById200One | Blob | GetSessionById200Three>
        | GetSessionById200One
        | Blob
        | GetSessionById200Three),
) => {
  return http.get("*/session/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      overrideResponse !== undefined
        ? typeof overrideResponse === "function"
          ? await overrideResponse(info)
          : overrideResponse
        : getGetSessionByIdResponseMock(),
      { status: 200, headers: { "Content-Type": "text/plain" } },
    );
  });
};

export const getDeleteSessionByIdMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/session/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetSessionByIdLogsMockHandler = (
  overrideResponse?:
    | GetSessionByIdLogs200One
    | Blob
    | GetSessionByIdLogs200Three
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetSessionByIdLogs200One | Blob | GetSessionByIdLogs200Three>
        | GetSessionByIdLogs200One
        | Blob
        | GetSessionByIdLogs200Three),
) => {
  return http.get("*/session/:id/logs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      overrideResponse !== undefined
        ? typeof overrideResponse === "function"
          ? await overrideResponse(info)
          : overrideResponse
        : getGetSessionByIdLogsResponseMock(),
      { status: 200, headers: { "Content-Type": "text/plain" } },
    );
  });
};

export const getGetDownloadByIdByFileMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/download/:id/:file", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getOttoBotAPIMock = () => [
  getGetHealthMockHandler(),
  getGetHealthMetricsMockHandler(),
  getPostSessionMockHandler(),
  getGetSessionByIdMockHandler(),
  getDeleteSessionByIdMockHandler(),
  getGetSessionByIdLogsMockHandler(),
  getGetDownloadByIdByFileMockHandler(),
];
